// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mc_ms_lam_range
List mc_ms_lam_range(NumericMatrix M, NumericMatrix X, NumericMatrix Z, NumericMatrix B, NumericMatrix mask, int num_B_cov, bool to_add_ID, bool to_estimate_u, bool to_estimate_v, int niter, double rel_tol, bool to_normalize, bool is_quiet);
RcppExport SEXP _MCMS_mc_ms_lam_range(SEXP MSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP maskSEXP, SEXP num_B_covSEXP, SEXP to_add_IDSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP to_normalizeSEXP, SEXP is_quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type num_B_cov(num_B_covSEXP);
    Rcpp::traits::input_parameter< bool >::type to_add_ID(to_add_IDSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type to_normalize(to_normalizeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_ms_lam_range(M, X, Z, B, mask, num_B_cov, to_add_ID, to_estimate_u, to_estimate_v, niter, rel_tol, to_normalize, is_quiet));
    return rcpp_result_gen;
END_RCPP
}
// mc_ms_fit
List mc_ms_fit(NumericMatrix M, NumericMatrix X, NumericMatrix Z, NumericMatrix B, NumericMatrix mask, double lambda_L, double lambda_H, double lambda_b, int num_B_cov, bool to_add_ID, bool to_estimate_u, bool to_estimate_v, bool to_estimate_b, bool to_estimate_H, int niter, double rel_tol, bool to_normalize, bool is_quiet, bool post_estimation);
RcppExport SEXP _MCMS_mc_ms_fit(SEXP MSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP maskSEXP, SEXP lambda_LSEXP, SEXP lambda_HSEXP, SEXP lambda_bSEXP, SEXP num_B_covSEXP, SEXP to_add_IDSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP to_estimate_bSEXP, SEXP to_estimate_HSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP to_normalizeSEXP, SEXP is_quietSEXP, SEXP post_estimationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_L(lambda_LSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_H(lambda_HSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_b(lambda_bSEXP);
    Rcpp::traits::input_parameter< int >::type num_B_cov(num_B_covSEXP);
    Rcpp::traits::input_parameter< bool >::type to_add_ID(to_add_IDSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_b(to_estimate_bSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_H(to_estimate_HSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type to_normalize(to_normalizeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    Rcpp::traits::input_parameter< bool >::type post_estimation(post_estimationSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_ms_fit(M, X, Z, B, mask, lambda_L, lambda_H, lambda_b, num_B_cov, to_add_ID, to_estimate_u, to_estimate_v, to_estimate_b, to_estimate_H, niter, rel_tol, to_normalize, is_quiet, post_estimation));
    return rcpp_result_gen;
END_RCPP
}
// mc_ms_cv
List mc_ms_cv(NumericMatrix M, NumericMatrix X, NumericMatrix Z, NumericMatrix B, NumericMatrix mask, int num_B_cov, bool to_add_ID, bool to_estimate_u, bool to_estimate_v, bool to_estimate_b, bool to_estimate_H, int niter, double rel_tol, bool to_normalize, double cv_ratio, int num_folds, int n_config, bool cube_search, bool is_quiet, bool post_estimation, bool model_selection_H, bool model_selection_b, bool return_mse, bool return_1se, int seed);
RcppExport SEXP _MCMS_mc_ms_cv(SEXP MSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP maskSEXP, SEXP num_B_covSEXP, SEXP to_add_IDSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP to_estimate_bSEXP, SEXP to_estimate_HSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP to_normalizeSEXP, SEXP cv_ratioSEXP, SEXP num_foldsSEXP, SEXP n_configSEXP, SEXP cube_searchSEXP, SEXP is_quietSEXP, SEXP post_estimationSEXP, SEXP model_selection_HSEXP, SEXP model_selection_bSEXP, SEXP return_mseSEXP, SEXP return_1seSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type num_B_cov(num_B_covSEXP);
    Rcpp::traits::input_parameter< bool >::type to_add_ID(to_add_IDSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_b(to_estimate_bSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_H(to_estimate_HSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type to_normalize(to_normalizeSEXP);
    Rcpp::traits::input_parameter< double >::type cv_ratio(cv_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type num_folds(num_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type n_config(n_configSEXP);
    Rcpp::traits::input_parameter< bool >::type cube_search(cube_searchSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    Rcpp::traits::input_parameter< bool >::type post_estimation(post_estimationSEXP);
    Rcpp::traits::input_parameter< bool >::type model_selection_H(model_selection_HSEXP);
    Rcpp::traits::input_parameter< bool >::type model_selection_b(model_selection_bSEXP);
    Rcpp::traits::input_parameter< bool >::type return_mse(return_mseSEXP);
    Rcpp::traits::input_parameter< bool >::type return_1se(return_1seSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_ms_cv(M, X, Z, B, mask, num_B_cov, to_add_ID, to_estimate_u, to_estimate_v, to_estimate_b, to_estimate_H, niter, rel_tol, to_normalize, cv_ratio, num_folds, n_config, cube_search, is_quiet, post_estimation, model_selection_H, model_selection_b, return_mse, return_1se, seed));
    return rcpp_result_gen;
END_RCPP
}
// mc_ms_lambda_analysis
int mc_ms_lambda_analysis(NumericMatrix M, NumericMatrix X, NumericMatrix Z, NumericMatrix B, NumericMatrix mask, String file_path, int num_B_cov, bool to_normalize, bool to_estimate_u, bool to_estimate_v, bool to_estimate_b, bool to_estimate_H, bool to_add_ID, int niter, int n_config, double rel_tol, bool is_quiet, int n_lambda, double cv_ratio, int num_folds, bool cube_search, bool post_estimation, bool model_selection_H, bool model_selection_b, int seed, bool write_to_file, int iter_lambda);
RcppExport SEXP _MCMS_mc_ms_lambda_analysis(SEXP MSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BSEXP, SEXP maskSEXP, SEXP file_pathSEXP, SEXP num_B_covSEXP, SEXP to_normalizeSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP to_estimate_bSEXP, SEXP to_estimate_HSEXP, SEXP to_add_IDSEXP, SEXP niterSEXP, SEXP n_configSEXP, SEXP rel_tolSEXP, SEXP is_quietSEXP, SEXP n_lambdaSEXP, SEXP cv_ratioSEXP, SEXP num_foldsSEXP, SEXP cube_searchSEXP, SEXP post_estimationSEXP, SEXP model_selection_HSEXP, SEXP model_selection_bSEXP, SEXP seedSEXP, SEXP write_to_fileSEXP, SEXP iter_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< String >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< int >::type num_B_cov(num_B_covSEXP);
    Rcpp::traits::input_parameter< bool >::type to_normalize(to_normalizeSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_b(to_estimate_bSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_H(to_estimate_HSEXP);
    Rcpp::traits::input_parameter< bool >::type to_add_ID(to_add_IDSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type n_config(n_configSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    Rcpp::traits::input_parameter< int >::type n_lambda(n_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type cv_ratio(cv_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type num_folds(num_foldsSEXP);
    Rcpp::traits::input_parameter< bool >::type cube_search(cube_searchSEXP);
    Rcpp::traits::input_parameter< bool >::type post_estimation(post_estimationSEXP);
    Rcpp::traits::input_parameter< bool >::type model_selection_H(model_selection_HSEXP);
    Rcpp::traits::input_parameter< bool >::type model_selection_b(model_selection_bSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type write_to_file(write_to_fileSEXP);
    Rcpp::traits::input_parameter< int >::type iter_lambda(iter_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_ms_lambda_analysis(M, X, Z, B, mask, file_path, num_B_cov, to_normalize, to_estimate_u, to_estimate_v, to_estimate_b, to_estimate_H, to_add_ID, niter, n_config, rel_tol, is_quiet, n_lambda, cv_ratio, num_folds, cube_search, post_estimation, model_selection_H, model_selection_b, seed, write_to_file, iter_lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCMS_mc_ms_lam_range", (DL_FUNC) &_MCMS_mc_ms_lam_range, 13},
    {"_MCMS_mc_ms_fit", (DL_FUNC) &_MCMS_mc_ms_fit, 19},
    {"_MCMS_mc_ms_cv", (DL_FUNC) &_MCMS_mc_ms_cv, 25},
    {"_MCMS_mc_ms_lambda_analysis", (DL_FUNC) &_MCMS_mc_ms_lambda_analysis, 27},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCMS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
